@namespace Pirate.UI.Fishing
@using System
@using Pirate.Ship
@using Pirate.World
@inherits PanelComponent

@if (Ship is null)
{
    return;
}

<root>
    <div class="prompt @ShouldShowPrompt()">
        <i>phishing</i>
        @if (!Ship.Fishing)
        {
            <div class="prompt-text @ShouldShowText()">
                Press
                <InputGlyph button="fish" size="small" variant="light"/>
                to fish
            </div>
        }
    </div>
</root>

@code
{
    [Property]
    public required FishingSpot FishingSpot { get; set; }

    public ShipController? Ship => ShipBuilder.Instance.PlayerShip;

    private TimeUntil TimeUntilTextAppears { get; set; }

    private string ShouldShowPrompt()
    {
        var classes = "";
        if (Ship.Fishing || Ship.CanFish(FishingSpot)) classes += "show ";
        if (Ship.Fishing) classes += "fishing ";
        return classes;
    }

    private string ShouldShowText()
    {
        return TimeUntilTextAppears < 0f ? "show" : "";
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if (Input.Pressed("fish"))
        {
            if (!Ship.Fishing)
            {
                if (Ship.CanFish(FishingSpot))
                {
                    Ship.StartFishing(FishingSpot);
                }
            }
            else
            {
                Ship.StopFishing();
                TimeUntilTextAppears = 0.13f;
            }
        }

        if (Ship.Fishing && !Ship.CanFish(FishingSpot))
            Ship.StopFishing();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Ship.Fishing, Ship.CanFish(FishingSpot), TimeUntilTextAppears < 0f);
    }
}